{"version":3,"sources":["config.ts","api/config.ts","lib/dom.ts","lib/json.ts","parser.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"..\\src","sourcesContent":["export interface IParserConfig {\r\n    set(obj: {node:string, exclude?:string[], include?:string[]}) : IParserConfig\r\n    excludeNode(...node:string[]): IParserConfig\r\n}\r\n\r\nexport class ParserConfig implements IParserConfig {\r\n    private obj: any = [];\r\n    private exc: any=[];\r\n\r\n    constructor(private api:boolean = false){}\r\n\r\n    set(obj: {node:string, exclude?:string[], include?:string[]}) : IParserConfig{\r\n        this._set(obj)\r\n        return this;\r\n    }\r\n\r\n    private _set(obj: {node:string, exclude?:string[], include?:string[]}) {\r\n        if(this.obj)\r\n        this.obj.push(obj);\r\n    }\r\n\r\n    private _excludeNode(...node:string[]){\r\n        this.exc.push(...node)\r\n    }\r\n\r\n    getObj() : [{node:string, exclude?:string[], include?:string[]}] {\r\n        return this.obj;\r\n    }\r\n\r\n    isApi() :boolean {\r\n        return this.api;\r\n    }\r\n\r\n    isExclude(node:string) :boolean {\r\n        return this.exc.includes(node); \r\n    }\r\n \r\n    excludeNode(...node:string[]) : IParserConfig {\r\n        this._excludeNode(...node);\r\n        return this;\r\n    }\r\n}","import { IParserConfig, ParserConfig } from './../config';\r\n\r\n// Maybe make other custom function.\r\nexport class ParserAPI implements IParserConfig {\r\n    constructor(public config:ParserConfig){}\r\n\r\n    set(obj: {node:string, exclude?:string[], include?:string[]}) : IParserConfig{\r\n        this.config.set(obj);\r\n        return this;\r\n    }\r\n\r\n\r\n    excludeNode(...node:string[]) : IParserConfig {\r\n        this.config.excludeNode(...node);\r\n        return this;\r\n    }\r\n\r\n}","import { Parser } from './../parser';\r\nimport { ParserConfig } from \"../config\";\r\n\r\nexport default class Dom {\r\n    private tmpElement: any[];\r\n    private tmpJson: any[];\r\n\r\n    constructor(private el:HTMLElement, protected config:ParserConfig){\r\n        this.tmpElement = [];\r\n        this.tmpJson = [];\r\n        this.init()\r\n\r\n    }\r\n\r\n    init(){\r\n        this.el.addEventListener(\"override\", (x:any) => {\r\n            let el = this.getElement(x[\"detail\"][\"v\"]);\r\n            if(el === null){\r\n                console.error(\"[!Error!] Cannot catch HTMLELEMENT ! \")\r\n            }\r\n            this.override(x[\"detail\"][\"o\"], el);\r\n        });\r\n        //TODO: chekc if has children\r\n        if(this.el.children.length >=1){\r\n            this.pre(this.el.children)\r\n            this.el.childNodes.forEach(x => {this.parse(x)})\r\n        } else {\r\n            throw new Error(\"[DTM] No children ! \")\r\n        }\r\n    }\r\n\r\n\r\n    pre(h:HTMLCollection, base:boolean = false){\r\n        for (let index = 0; index < h.length; index++) {\r\n            let element = h[index];\r\n            this.tmpElement.push(element);\r\n            if(element.children.length > 0){\r\n                this.pre(element.children,  true)\r\n            }\r\n        }\r\n    }\r\n\r\n    private override(obj:any, v:Element){\r\n        let attr = [];\r\n        if(this.config.isApi()){\r\n            let co = this.config.getObj().filter(x => x.node.toLowerCase() === v.nodeName.toLowerCase());\r\n            if(co.length===1){\r\n                let m = co[0];\r\n                let bin = typeof m[\"include\"] !== \"undefined\";\r\n                let bex = typeof m[\"exclude\"] !== \"undefined\";\r\n                for(let i =0; i<v.attributes.length; i++){\r\n                    let va = v.attributes.item(i);\r\n                    if(bin && bex){\r\n                        let xin = m[\"include\"].filter((x) => x.toLowerCase() === va.name.toLowerCase())\r\n                        let xen = m[\"exclude\"].filter((x) => x.toLowerCase() === va.name.toLowerCase())                    \r\n                        if(xin.length >1 && xen.length>=1) {\r\n                            throw new Error(\"[DomToJson] \"+ va.name+ \"is on exclude and include !\");\r\n                        }\r\n                        if(xin.length >=1){\r\n                            attr.push({name:va.name, value:va.value})\r\n                        }\r\n                        if(xen.length>=1){\r\n                            attr.push({name:va.name, value:va.value})\r\n                        }\r\n                    }\r\n\r\n                    if(bin){\r\n                        let xin = m[\"include\"].filter((x) => x.toLowerCase() === va.name.toLowerCase())\r\n                        if(xin){\r\n                            attr.push({name:va.name, value:va.value})\r\n                        }\r\n                    }\r\n                    if(bex){\r\n                        let xen = m[\"exclude\"].filter((x) => x.toLowerCase() === va.name.toLowerCase());\r\n                        if(!(xen.length >=1)){\r\n                            attr.push({name:va.name, value:va.value})\r\n                        } else return;\r\n                    }                 \r\n                }\r\n            }\r\n        } else {\r\n            for(let i = 0; i < v.attributes.length; i++){\r\n                let va = v.attributes.item(i);\r\n                attr.push({name:va.name, value: va.value})\r\n            }\r\n        }\r\n        if(attr.length >=1){\r\n            obj[\"attr\"] = attr;\r\n        }\r\n\r\n    }\r\n\r\n    private parse(v:Node, base:any = null) {\r\n        let nodeName = v.nodeName.toLowerCase();\r\n        let obj:any = {};\r\n        obj['node'] = nodeName;\r\n        if(base === null && nodeName !== \"#text\"){\r\n            this.tmpJson.push(obj)\r\n        }\r\n    \r\n        if(v.nodeName !== \"#text\"){\r\n            let e = new CustomEvent(\"override\", {\"detail\": {\"v\": v, \"o\": obj}})\r\n            this.el.dispatchEvent(e)\r\n        }\r\n        if(v.hasChildNodes()){\r\n    \r\n          if(base != null){\r\n            if(typeof base[\"childs\"] === \"undefined\") base[\"childs\"] = [];\r\n            base[\"childs\"].push(obj)\r\n          }\r\n          \r\n          let text = v.childNodes.item(0);\r\n          if(text.nodeName === \"#text\"){\r\n            obj[\"text\"] = text.textContent;\r\n          }\r\n    \r\n          if(v.childNodes.length >= 1){\r\n            obj[\"childs\"] = [];\r\n            v.childNodes.forEach(x => {this.parse(x, obj)})\r\n          }\r\n        } else if(v.nodeName === \"#text\" && base != null) {\r\n          if(base[\"text\"] === v.textContent){\r\n            delete base[\"childs\"];\r\n          } else {\r\n            obj[\"text\"] = v.textContent;\r\n            base[\"childs\"].push(obj) \r\n          }\r\n    \r\n        } else if(base != null) {\r\n            base[\"childs\"].push(obj)\r\n        }\r\n    \r\n\r\n    }\r\n    \r\n\r\n\r\n    private getElement(n:Node) {\r\n        let map = this.tmpElement.filter((x:any) => x.isSameNode(n))\r\n        return map.length === 0 ? null : map[0]\r\n    }\r\n\r\n    getJson() : Object{\r\n        return this.tmpJson;\r\n    }\r\n}","\r\nexport class Json {\r\n    private tmp:any = []\r\n\r\n    constructor(private json:[]){\r\n        for(let i = 0; i < Object.keys(this.json).length; i++){\r\n            this.parse(this.json[i], null)\r\n        }\r\n    }\r\n\r\n\r\n    parse(obj:any, base:any = null){\r\n        let node = obj[\"node\"];\r\n        let d:any = null;\r\n        if(node === \"#text\"){\r\n            d = document.createTextNode(obj[\"text\"]);\r\n        } else {\r\n            d = document.createElement(node);\r\n            if(obj[\"text\"]!== undefined){\r\n                d.textContent = obj[\"text\"]\r\n            } \r\n        }\r\n        if(base === null){\r\n            this.tmp.push(d);\r\n        }\r\n        if(obj[\"attr\"] !== undefined){\r\n            obj[\"attr\"].forEach((x:any) => {d.setAttribute(x[\"name\"], x[\"value\"])})\r\n        }\r\n        \r\n        if(obj['childs'] !== undefined){\r\n            obj[\"childs\"].forEach((x:any) => {this.parse(x, d)})\r\n        }\r\n\r\n        if(base !== null){\r\n            base.appendChild(d);\r\n        }\r\n    }\r\n\r\n    getElement(){\r\n        return this.tmp;\r\n    }\r\n}","import { IParserConfig, ParserConfig } from \"./config\";\r\nimport { ParserAPI } from \"./api/config\";\r\nimport Dom from \"./lib/dom\";\r\nimport { Json } from \"./lib/json\";\r\n\r\nexport interface IParser{\r\n    toJson(element:HTMLElement) : Object\r\n    toDom(json:[], element?:HTMLElement): HTMLElement\r\n    newInstance(): IParser\r\n}\r\n\r\n\r\nexport class Parser implements IParser {\r\n    private config:ParserConfig = new ParserConfig();\r\n    constructor(){}\r\n\r\n    api(fn: {(api:ParserAPI) : IParserConfig}){\r\n        let napi:ParserAPI = fn(new ParserAPI(new ParserConfig(true))) as ParserAPI;\r\n        // fn((api:IParserConfig) => {\r\n        //     api.set({node:\"img\", \"exclude\": [\"id\"]})\r\n        // })\r\n\r\n        this.config = napi.config;\r\n    }\r\n\r\n\r\n    toJson(element:HTMLElement) : Object {\r\n        let json = new Dom(element, this.config);\r\n        return json.getJson();\r\n    }\r\n    \r\n\r\n    toDom(json:[], element?:HTMLElement): HTMLElement {\r\n        let dom = new Json(json);\r\n        let d: HTMLElement;\r\n        if(typeof element === \"undefined\"){\r\n           d = document.createElement(\"div\");\r\n            dom.getElement().forEach(x => {d.appendChild(x)});\r\n        } else {\r\n            d = element;\r\n            dom.getElement().forEach(x => {d.appendChild(x)});\r\n        }\r\n        return d;\r\n    }\r\n\r\n    newInstance(): IParser{\r\n        return new Parser();\r\n    }\r\n}\r\n","import { Parser } from './parser';\r\n\r\nexport { Parser };"]}